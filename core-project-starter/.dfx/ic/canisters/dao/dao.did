type Tokens = record {amount: nat;};
type Result_1 = 
 variant {
   err: text;
   ok: Proposal;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type ProposalState = 
 variant {
   open;
   passed;
   rejected;
 };
type Proposal = 
 record {
   id: nat;
   payload: text;
   proposer: principal;
   state: ProposalState;
   voters: List;
   votes_no: Tokens;
   votes_yes: Tokens;
 };
type List = 
 opt record {
       principal;
       List;
     };
type Account = 
 record {
   owner: principal;
   subaccount: opt vec nat8;
 };
service : {
  balance: (Account) -> (nat);
  get_all_proposals: () -> (vec record {
                                  nat;
                                  Proposal;
                                }) query;
  get_proposal: (nat) -> (opt Proposal) query;
  submit_proposal: (text) -> (Result_1);
  vote: (nat, bool) -> (Result);
}
