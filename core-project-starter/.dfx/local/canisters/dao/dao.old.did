type Tokens = record {amount: nat;};
type ProposalState = 
 variant {
   open;
   passed;
   rejected;
 };
type ProposalPayload = 
 record {
   canister_id: principal;
   message: text;
 };
type Proposal = 
 record {
   id: nat;
   payload: ProposalPayload;
   proposer: principal;
   state: ProposalState;
   voters: List;
   votes_no: Tokens;
   votes_yes: Tokens;
 };
type List = 
 opt record {
       principal;
       List;
     };
service : {
  balance: (principal) -> (nat);
  get_all_proposals: () -> (vec record {
                                  int;
                                  Proposal;
                                }) query;
  get_proposal: (int) -> (opt Proposal) query;
  submit_proposal: (text) -> (variant {
                                Err: text;
                                Ok: Proposal;
                              });
  vote: (int, bool) -> (variant {
                          Err: text;
                          Ok: record {
                                nat;
                                nat;
                              };
                        });
}
